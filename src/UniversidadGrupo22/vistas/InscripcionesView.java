/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UniversidadGrupo22.vistas;

import UniversidadGrupo22.accesoADatos.AlumnoData;
import UniversidadGrupo22.accesoADatos.InscripcionData;
import UniversidadGrupo22.accesoADatos.MateriaData;
import UniversidadGrupo22.entidades.Alumno;
import UniversidadGrupo22.entidades.Inscripcion;
import UniversidadGrupo22.entidades.Materia;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author javier
 */
public class InscripcionesView extends javax.swing.JInternalFrame {

    private AlumnoData alumnoData;
    private List<Alumno> listarAlumnos;
    private DefaultTableModel modelo;
    private MateriaData materiaData;
    private InscripcionData inscripcionData;

    /**
     * Creates new form InscripcionesView
     */
    public InscripcionesView() {
        initComponents();

        // Inicializo el acceso a los datos de las tablas alumno e inscripcion
        // que se utilizan en este Frame interno
        alumnoData = new AlumnoData();
        listarAlumnos = alumnoData.listarAlumnos();
        cargarAlumnos();
        modelo = new DefaultTableModel();
        armarCabeceraDeLaTabla();
        inscripcionData = new InscripcionData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jcbSeleccioneAlumno = new javax.swing.JComboBox<>();
        jrbMateriasInscriptas = new javax.swing.JRadioButton();
        jrbMateriasNoInscriptas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jbInscribir = new javax.swing.JButton();
        jbAnularInscripcion = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setTitle("Formulario de Inscripciones");

        jPanel1.setBackground(new java.awt.Color(56, 113, 140));

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Formulario de Inscripción");

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Seleccione un Alumno:");

        jLabel4.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Listado de Materias");

        jrbMateriasInscriptas.setForeground(new java.awt.Color(255, 255, 255));
        jrbMateriasInscriptas.setText("Materias Inscriptas");
        jrbMateriasInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMateriasInscriptasActionPerformed(evt);
            }
        });

        jrbMateriasNoInscriptas.setForeground(new java.awt.Color(255, 255, 255));
        jrbMateriasNoInscriptas.setText("Materias No Inscriptas");
        jrbMateriasNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMateriasNoInscriptasActionPerformed(evt);
            }
        });

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Año"
            }
        ));
        jScrollPane1.setViewportView(jtMaterias);

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        jbInscribir.setText("Inscribir");
        jbInscribir.setEnabled(false);
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbAnularInscripcion.setText("Anular Inscripción");
        jbAnularInscripcion.setEnabled(false);

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jcbSeleccioneAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jrbMateriasInscriptas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(jrbMateriasNoInscriptas)
                        .addGap(57, 57, 57))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbInscribir)
                        .addGap(126, 126, 126)
                        .addComponent(jbAnularInscripcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbSalir))
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(220, 220, 220))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbSeleccioneAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbMateriasInscriptas)
                    .addComponent(jrbMateriasNoInscriptas))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscribir)
                    .addComponent(jbAnularInscripcion)
                    .addComponent(jbSalir))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrbMateriasNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMateriasNoInscriptasActionPerformed
        // Deselecciono el jrbMateriasNoInscriptas
        jrbMateriasInscriptas.setSelected(false);

        // Activo el boton Inscribir
        jbInscribir.setEnabled(true);

        // desactivo el boton Anular Inscripción
        jbAnularInscripcion.setEnabled(false);

        // Cargo la jTable jtMaterias con las materias en las que el alumno no
        // se inscribio utilizando el metodo:
        cargarNoInscriptos();
    }//GEN-LAST:event_jrbMateriasNoInscriptasActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // Código para cerrar una ventana
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jrbMateriasInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMateriasInscriptasActionPerformed
        // Deselecciono el jrbMateriasNoInscriptas
        jrbMateriasNoInscriptas.setSelected(false);

        // Desactivo el boton Inscribir
        jbInscribir.setEnabled(false);

        // Activo el boton Anular Inscripción
        jbAnularInscripcion.setEnabled(true);

        // Cargo la jTable jtMaterias con las materias en las que el alumno se
        // inscribio utilizando el metodo:
        cargarInscriptos();
    }//GEN-LAST:event_jrbMateriasInscriptasActionPerformed

    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        // Quiero el alumno seleccionado en el ComboBox
        Alumno alu = (Alumno) jcbSeleccioneAlumno.getSelectedItem();
        
        // Cargo la fila que seleccione
        int filaSeleccionada = jtMaterias.getSelectedRow();

        // Aqui quiero saber si hay una fila seleccionada y si el ComboBox no
        // esta vacio que seria null si esta vacio
        if (filaSeleccionada != -1 && alu != null) {
            // Extraigo del modelo con getValueAt los datos que me interesan
            // y los casteo al tipo de dato que necesito
            int idMateria = (Integer) modelo.getValueAt(filaSeleccionada, 0);
            String nombreMateria = (String) modelo.getValueAt(filaSeleccionada, 1);
            int anio = (Integer) modelo.getValueAt(filaSeleccionada, 2);

            // Compongo el Object mat con los datos de la materia
            Materia mat = new Materia(idMateria, nombreMateria, anio, true);

            // Compongo el Object inscribir con los objetos alumno y materia
            Inscripcion inscribir = new Inscripcion(alu, mat, 0);

            // Por fin lo inscribo al alumno en la materia seleccionada
            inscripcionData.guardarInscripcion(inscribir);
            
            // Limpio el desastre
            borrarFilasTabla();
        } else {
            JOptionPane.showMessageDialog(null, "Primero seleccione un Alumno y una Materia");
        }
    }//GEN-LAST:event_jbInscribirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbAnularInscripcion;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbSeleccioneAlumno;
    private javax.swing.JRadioButton jrbMateriasInscriptas;
    private javax.swing.JRadioButton jrbMateriasNoInscriptas;
    private javax.swing.JTable jtMaterias;
    // End of variables declaration//GEN-END:variables

    public void cargarInscriptos() {
        // Primero me aseguro de que esten limpias las filas de la tabla
        borrarFilasTabla();

        Alumno seleccionado = (Alumno) jcbSeleccioneAlumno.getSelectedItem();
        if (seleccionado != null) {
            ArrayList<Materia> lista = (ArrayList) inscripcionData.obtenerMateriasInscriptas(seleccionado);

            for (Materia mat : lista) {
                modelo.addRow(new Object[]{mat.getIdMateria(), mat.getNombre(), mat.getAnioMateria()});
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione primero un alumno");
        }
    }

    public void cargarNoInscriptos() {
        // Primero me aseguro de que esten limpias las filas de la tabla
        borrarFilasTabla();

        Alumno seleccionado = (Alumno) jcbSeleccioneAlumno.getSelectedItem();
        if (seleccionado != null) {
            ArrayList<Materia> lista = (ArrayList) inscripcionData.obtenerMateriaNoInscriptas(seleccionado);

            for (Materia mat : lista) {
                modelo.addRow(new Object[]{mat.getIdMateria(), mat.getNombre(), mat.getAnioMateria()});
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione primero un alumno");
        }
    }

    public void cargarAlumnos() {
        // Cargamos los alumnos en el ComboBox
        for (Alumno listarAlumno : listarAlumnos) {
            jcbSeleccioneAlumno.addItem(listarAlumno);
        }
    }

    public void armarCabeceraDeLaTabla() {
        // Al modelo le agregamos las siguientes columnas:
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Año");

        // Y a nuestra Tabla le seteamos el modelo
        jtMaterias.setModel(modelo);

        // Ajusto el tamaño de las columnas de la tabla
        jtMaterias.getColumnModel().getColumn(0).setPreferredWidth(30);
        jtMaterias.getColumnModel().getColumn(1).setPreferredWidth(220);
        jtMaterias.getColumnModel().getColumn(2).setPreferredWidth(100);
    }

    public void borrarFilasTabla() {
        // Con este metodo puedo borrar una fila especifica al recorrerla el modelo
        if (modelo != null) {
            int a = modelo.getColumnCount() - 1;

            for (int i = a; i >= 0; i--) {
                modelo.removeRow(i);
            }
        }
    }
}
